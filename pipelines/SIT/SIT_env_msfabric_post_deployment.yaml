# Pipeline naming convention with branch and timestamp
name: 'PostDeploy_SIT_$(Build.SourceBranchName)_$(date:yyyyMMdd)_$(rev:r)'

# Disable CI/PR triggers
trigger: none
pr: none

# Define pool with specific image version for consistency
pool:
  vmImage: 'ubuntu-latest'
  # Alternative: vmImage: 'ubuntu-22.04'

# Repository resources configuration
resources:
  repositories:
    - repository: dahFabricWs
      type: git
      name: DAH/dah_fabric_ws
      ref: refs/heads/main  # Explicit branch reference
      
    - repository: dahAdf
      type: git
      name: DAH/dah_adf
      ref: refs/heads/adf_publish

# Variables and variable groups
variables:
  - template: ./input_vars.yaml
  - group: ${{ variables.variableGroupName }}
  - name: pipelineStartTime
    value: $[format('{0:yyyy-MM-dd HH:mm:ss}', pipeline.startTime)]
  - name: deploymentPrefix
    value: 'SIT_PostDeploy_$(Build.BuildId)'

# Pipeline parameters for flexibility
parameters:
  - name: runMSFabricDeployment
    displayName: 'Run MS Fabric Post-Deployment'
    type: boolean
    default: true
    
  - name: runADFDeployment
    displayName: 'Run ADF Post-Deployment'
    type: boolean
    default: true
    
  - name: runWarehouseDeployment
    displayName: 'Run Warehouse Deployment'
    type: boolean
    default: true
    
  - name: continueOnError
    displayName: 'Continue on Error'
    type: boolean
    default: false

stages:
  # Stage: Pre-deployment validation
  - stage: PreDeploymentValidation
    displayName: 'Pre-Deployment Validation'
    jobs:
      - job: ValidateEnvironment
        displayName: 'Validate SIT Environment'
        steps:
          - task: PowerShell@2
            displayName: 'Display Pipeline Configuration'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "##[section]Pipeline Configuration"
                Write-Host "Pipeline: $(Build.DefinitionName)"
                Write-Host "Run ID: $(Build.BuildId)"
                Write-Host "Started: $(pipelineStartTime)"
                Write-Host "Triggered by: $(Build.RequestedFor)"
                Write-Host "Reason: $(Build.Reason)"
                
                Write-Host "##[section]Deployment Parameters"
                Write-Host "Environment: ${{ variables.environment }}"
                Write-Host "MS Fabric Deployment: ${{ parameters.runMSFabricDeployment }}"
                Write-Host "ADF Deployment: ${{ parameters.runADFDeployment }}"
                Write-Host "Warehouse Deployment: ${{ parameters.runWarehouseDeployment }}"
                
                Write-Host "##[section]Repository Information"
                Write-Host "dahFabricWs: $(resources.repositories.dahFabricWs.ref)"
                Write-Host "dahAdf: $(resources.repositories.dahAdf.ref)"
          
          - task: AzureCLI@2
            displayName: 'Validate Azure Connection'
            inputs:
              azureSubscription: ${{ variables.azureServiceConnection }}
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              failOnStandardError: true
              inlineScript: |
                set -euo pipefail
                
                echo "##[section]Validating Azure connection..."
                
                # Test connection
                echo "##[command]Testing Azure CLI connection..."
                az account show --query "{Subscription:name, ID:id}" --output table
                
                # Validate service principal
                echo "##[command]Validating service principal..."
                if az ad sp show --id "${{ variables.service_principal_id }}" --query appId -o tsv &>/dev/null; then
                  echo "##[section]âœ“ Service principal validated"
                else
                  echo "##[error]Service principal validation failed"
                  exit 1
                fi

  # Stage: MS Fabric Post-Deployment
  - stage: MSFabricPostDeployment
    displayName: 'MS Fabric Post-Deployment'
    dependsOn: PreDeploymentValidation
    condition: |
      and(
        succeeded(),
        eq(${{ parameters.runMSFabricDeployment }}, true)
      )
    jobs:
      - job: MSFabricPostDeployment
        displayName: 'Deploy MS Fabric Components'
        timeoutInMinutes: 120  # 2 hour timeout
        continueOnError: ${{ parameters.continueOnError }}
        steps:
          - checkout: dahFabricWs
            displayName: 'Checkout Fabric Workspace Repository'
            clean: true
            
          - checkout: self
            displayName: 'Checkout Pipeline Repository'
            clean: true
            
          - template: ../msfabric_post_deployment_template.yaml
            parameters:
              azureServiceConnection: ${{ variables.azureServiceConnection }}
              environment: ${{ variables.environment }}
              ms_fabric_workspaces: ${{ variables.ms_fabric_workspaces }}
              tenant_id: ${{ variables.tenant_id }}
              service_principal_id: ${{ variables.service_principal_id }}
              dataverse_storage_container: ${{ variables.dataverse_storage_container }}
              fabric_setup_admin_principal_id: ${{ variables.fabric_setup_admin_principal_id }}
          
          - task: PowerShell@2
            displayName: 'Log MS Fabric Deployment Status'
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                $status = "$(Agent.JobStatus)"
                Write-Host "##[section]MS Fabric Deployment Status: $status"
                
                if ($status -ne "Succeeded") {
                  Write-Host "##[warning]MS Fabric deployment completed with status: $status"
                }

  # Stage: Azure ADF Post-Deployment
  - stage: AzureADFpostDeployment
    displayName: 'Azure ADF Post-Deployment'
    dependsOn: MSFabricPostDeployment
    condition: |
      and(
        not(failed()),
        eq(${{ parameters.runADFDeployment }}, true)
      )
    jobs:
      - job: AzureADFpostDeployment
        displayName: 'Deploy ADF Components'
        timeoutInMinutes: 90  # 1.5 hour timeout
        continueOnError: ${{ parameters.continueOnError }}
        steps:
          - checkout: dahFabricWs
            displayName: 'Checkout Fabric Workspace Repository'
            clean: true
            
          - checkout: dahAdf
            displayName: 'Checkout ADF Repository'
            clean: true
            
          - checkout: self
            displayName: 'Checkout Pipeline Repository'
            clean: true
            
          - template: ../azure_adf_post_deployment_template.yaml
            parameters:
              azureServiceConnection: ${{ variables.azureServiceConnection }}
              environment: ${{ variables.environment }}
              ms_fabric_workspaces: ${{ variables.ms_fabric_workspaces }}
              adf_name: ${{ variables.adf_name }}
              keyvault_name: ${{ variables.keyvault_name }}
              storage_account_name: ${{ variables.storage_account_name }}
              resourceGroupName: ${{ variables.resourceGroupName }}
              service_principal_id: ${{ variables.service_principal_id }}
              adf_shir_adf_name: ${{ variables.adf_shir_adf_name }}
              adf_shir_resource_group: ${{ variables.adf_shir_resource_group }}
              subscriptionId: ${{ variables.subscriptionId }}
          
          - task: PowerShell@2
            displayName: 'Log ADF Deployment Status'
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                $status = "$(Agent.JobStatus)"
                Write-Host "##[section]ADF Deployment Status: $status"
                
                if ($status -ne "Succeeded") {
                  Write-Host "##[warning]ADF deployment completed with status: $status"
                }

  # Stage: Warehouse Deployment (NEU)
  - stage: WarehouseDeployment
    displayName: 'Deploy Data Warehouses'
    dependsOn: AzureADFpostDeployment
    condition: |
      and(
        not(failed()),
        eq(${{ parameters.runWarehouseDeployment }}, true)
      )
    jobs:
      - job: BuildAndDeployWarehouses
        displayName: 'Build and Deploy Warehouses'
        timeoutInMinutes: 60
        continueOnError: ${{ parameters.continueOnError }}
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TriggerBuild@3
            displayName: 'Trigger Warehouse DACPAC Build'
            inputs:
              definitionIsInCurrentTeamProject: true
              buildDefinition: 'Build_Warehouse_DACPACs'
              queueBuildForUserThatTriggeredBuild: true
              waitForQueuedBuildsToFinish: true
              waitForQueuedBuildsToFinishRefreshTime: 60
              buildTimeOutInMinutes: 30

          - template: ../database/deploy-warehouses-template.yaml
            parameters:
              environment: ${{ variables.environment }}
              azureServiceConnection: ${{ variables.azureServiceConnection }}
              ms_fabric_workspaces: ${{ variables.ms_fabric_workspaces }}
          
          - task: PowerShell@2
            displayName: 'Log Warehouse Deployment Status'
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                $status = "$(Agent.JobStatus)"
                Write-Host "##[section]Warehouse Deployment Status: $status"
                
                if ($status -ne "Succeeded") {
                  Write-Host "##[warning]Warehouse deployment completed with status: $status"
                }

  # Stage: Post-Deployment Summary
  - stage: PostDeploymentSummary
    displayName: 'Post-Deployment Summary'
    dependsOn: 
      - MSFabricPostDeployment
      - AzureADFpostDeployment
      - WarehouseDeployment
    condition: always()
    jobs:
      - job: GenerateSummary
        displayName: 'Generate Deployment Summary'
        steps:
          - task: PowerShell@2
            displayName: 'Create Deployment Summary'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "##[section]Post-Deployment Summary"
                
                # Calculate duration
                $duration = [Math]::Round(((Get-Date) - [DateTime]"$(pipelineStartTime)").TotalMinutes, 2)
                
                Write-Host "Environment: SIT"
                Write-Host "Pipeline: $(Build.DefinitionName)"
                Write-Host "Build ID: $(Build.BuildId)"
                Write-Host "Duration: $duration minutes"
                
                # Create summary
                $summary = @"
                ## SIT Post-Deployment Summary
                
                ### Execution Details
                | Property | Value |
                |----------|-------|
                | Pipeline | $(Build.DefinitionName) |
                | Build ID | $(Build.BuildId) |
                | Environment | ${{ variables.environment }} |
                | Duration | $duration minutes |
                | Triggered By | $(Build.RequestedFor) |
                
                ### Stage Results
                | Stage | Status |
                |-------|--------|
                | Pre-Deployment Validation | $(PreDeploymentValidation.result) |
                | MS Fabric Post-Deployment | $(MSFabricPostDeployment.result) |
                | Azure ADF Post-Deployment | $(AzureADFpostDeployment.result) |
                | Warehouse Deployment | $(WarehouseDeployment.result) |
                
                ### Resources Deployed
                - ADF: ${{ variables.adf_name }}
                - Key Vault: ${{ variables.keyvault_name }}
                - Resource Group: ${{ variables.resourceGroupName }}
                - Warehouses: system_wh, pl_sales_pricing_dm_wh
                "@
                
                Write-Host $summary
                
                # Save summary
                $summary | Out-File -FilePath "$(Agent.TempDirectory)/post-deployment-summary.md"
                Write-Host "##vso[task.uploadsummary]$(Agent.TempDirectory)/post-deployment-summary.md"