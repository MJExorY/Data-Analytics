parameters:
- name: resourceGroupName
  type: string
  default: ''

- name: environment
  type: string
  default: ''
  values:
  - DEV
  - UAT
  - PRD

- name: azureServiceConnection
  type: string
  default: ''

- name: bicepParamFile
  type: string
  default: ''

- name: bicepTemplateFile
  type: string
  default: ''

- name: pipelineValidationApprovalPerson
  type: string
  default: ''

- name: variableGroupName
  type: string
  default: ''

- name: ms_fabric_workspaces
  type: string
  default: ''

- name: capacityName
  type: string
  default: ''

- name: subscriptionId
  type: string
  default: ''

- name: keyvault_name
  type: string
  default: ''

- name: service_principal_id
  type: string
  default: ''

- name: adf_name
  type: string
  default: ''

stages:
- stage: Create_IaC_${{ parameters.environment }}
  displayName: 'Create IaC - ${{ parameters.environment }}'
  condition: and(not(failed()), not(canceled()))
  variables:
    - group: ${{ parameters.variableGroupName }}
    - name: resourceGroupName
      value: '${{ parameters.resourceGroupName }}'
    - name: bicepParamFile
      value: '${{ parameters.bicepParamFile }}'
    - name: environment
      value: ${{ parameters.environment }}
    - name: bicepTemplateFile
      value: '${{ parameters.bicepTemplateFile }}'
    # Key Vault Secrets User - This is a built-in Azure role ID (same across all subscriptions)
    - name: keyvaultRoleDefinitionId
      value: '4633458b-17de-408a-b874-0445c86b69e6'
    - name: deploymentName
      value: 'DeployPipelineTemplate_${{ parameters.environment }}_$(Build.BuildId)'
  
  jobs:
  - job: waitForValidation
    displayName: 'Wait for external pipeline validation and approval'
    pool: server
    timeoutInMinutes: 1440
    steps:
    - task: ManualValidation@0
      condition: or(eq('${{ parameters.environment }}', 'UAT'), eq('${{ parameters.environment }}', 'PRD'))
      timeoutInMinutes: 1440
      inputs:
        notifyUsers: |
          ${{ parameters.pipelineValidationApprovalPerson }}
        instructions: 'Please approve the pipeline for environment ${{ parameters.environment }} before continuing.'
        onTimeout: 'resume'

  - job: CreateIaC
    displayName: 'Create IaC Resources'
    dependsOn: waitForValidation
    condition: and(not(failed()), not(canceled()))
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Install Bicep CLI'
      inputs:
        azureSubscription: '${{ parameters.azureServiceConnection }}'
        scriptType: bash
        scriptLocation: inlineScript
        useGlobalConfig: false
        failOnStandardError: true
        inlineScript: |
          set -euo pipefail
          
          echo "##[section]Installing Bicep CLI..."
          
          # Install latest Bicep version
          BICEP_INSTALL_DIR="/usr/local/bin"
          curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          chmod +x ./bicep
          sudo mv ./bicep $BICEP_INSTALL_DIR/bicep
          
          # Verify installation
          echo "##[section]Verifying Bicep installation..."
          az bicep version
          
    - task: AzureCLI@2
      displayName: 'Validate Bicep Template'
      inputs:
        azureSubscription: '${{ parameters.azureServiceConnection }}'
        scriptType: bash
        scriptLocation: inlineScript
        useGlobalConfig: false
        failOnStandardError: true
        inlineScript: |
          set -euo pipefail
          
          echo "##[section]Validating Bicep template..."
          
          # Validate template syntax
          az bicep build --file "$(bicepTemplateFile)"
          
          # Validate deployment
          az deployment group validate \
            --resource-group "${{ parameters.resourceGroupName }}" \
            --template-file "$(bicepTemplateFile)" \
            --parameters "$(bicepParamFile)" \
            --parameters vmAdminUserPassKeyvault="$(VM-Admin-Password)" \
                        vmAdminUserNameKeyvault="$(VM-Admin-UserName)"
          
          echo "##[section]Template validation completed successfully"
          
    - task: AzureCLI@2
      displayName: 'Manage ADF Key Vault Access'
      inputs:
        azureSubscription: '${{ parameters.azureServiceConnection }}'
        scriptType: bash
        scriptLocation: inlineScript
        useGlobalConfig: false
        failOnStandardError: true
        inlineScript: |
          set -euo pipefail
          
          echo "##[section]Managing ADF Key Vault access..."
          
          # Retrieve ADF Managed Identity
          echo "##[command]Retrieving ADF Managed Identity for: ${{ parameters.adf_name }}"
          adfPrincipalId=$(az datafactory show \
            --name "${{ parameters.adf_name }}" \
            --resource-group "${{ parameters.resourceGroupName }}" \
            --query "identity.principalId" \
            --output tsv)
          
          if [ -z "$adfPrincipalId" ]; then
            echo "##[error]Failed to retrieve ADF Managed Identity Object ID"
            exit 1
          fi
          
          echo "##[section]ADF Managed Identity Object ID: $adfPrincipalId"
          
          # Define Key Vault scope
          keyvaultScope="/subscriptions/${{ parameters.subscriptionId }}/resourceGroups/${{ parameters.resourceGroupName }}/providers/Microsoft.KeyVault/vaults/${{ parameters.keyvault_name }}"
          roleDefinitionId="/subscriptions/${{ parameters.subscriptionId }}/providers/Microsoft.Authorization/roleDefinitions/$(keyvaultRoleDefinitionId)"
          
          # Check for existing RBAC assignment
          echo "##[command]Checking for existing RBAC assignment..."
          assignmentId=$(az role assignment list \
            --scope "$keyvaultScope" \
            --query "[?principalId=='$adfPrincipalId' && roleDefinitionId=='$roleDefinitionId'].id" \
            --output tsv)
          
          # Remove existing assignment if found
          if [ -n "$assignmentId" ]; then
            echo "##[warning]Found existing RBAC assignment: $assignmentId"
            echo "##[command]Removing existing RBAC assignment..."
            az role assignment delete --ids "$assignmentId"
            echo "##[section]RBAC assignment removed successfully"
          else
            echo "##[section]No existing RBAC assignment found"
          fi
          
    - task: AzureCLI@2
      displayName: 'Deploy Bicep Template'
      inputs:
        azureSubscription: '${{ parameters.azureServiceConnection }}'
        scriptType: bash
        scriptLocation: inlineScript
        useGlobalConfig: false
        failOnStandardError: true
        inlineScript: |
          set -euo pipefail
          
          echo "##[section]Starting Bicep deployment..."
          echo "##[group]Deployment Parameters"
          echo "Resource Group: ${{ parameters.resourceGroupName }}"
          echo "Template File: $(bicepTemplateFile)"
          echo "Parameter File: $(bicepParamFile)"
          echo "Deployment Name: $(deploymentName)"
          echo "##[endgroup]"
          
          # Validate required files exist
          if [ ! -f "$(bicepTemplateFile)" ]; then
            echo "##[error]Bicep template file not found: $(bicepTemplateFile)"
            exit 1
          fi
          
          if [ ! -f "$(bicepParamFile)" ]; then
            echo "##[error]Bicep parameter file not found: $(bicepParamFile)"
            exit 1
          fi
          
          # Deploy Bicep template
          echo "##[command]Deploying Bicep template..."
          az deployment group create \
            --resource-group "${{ parameters.resourceGroupName }}" \
            --template-file "$(bicepTemplateFile)" \
            --parameters "$(bicepParamFile)" \
            --name "$(deploymentName)" \
            --parameters vmAdminUserPassKeyvault="$(VM-Admin-Password)" \
                        vmAdminUserNameKeyvault="$(VM-Admin-UserName)" \
            --output table
          
          echo "##[section]Deployment completed successfully"
          
    - task: AzureCLI@2
      displayName: 'Export Deployment Outputs'
      condition: succeeded()
      inputs:
        azureSubscription: '${{ parameters.azureServiceConnection }}'
        scriptType: bash
        scriptLocation: inlineScript
        useGlobalConfig: false
        failOnStandardError: true
        inlineScript: |
          set -euo pipefail
          
          echo "##[section]Exporting deployment outputs..."
          
          # Get deployment outputs
          outputs=$(az deployment group show \
            --resource-group "${{ parameters.resourceGroupName }}" \
            --name "$(deploymentName)" \
            --query "properties.outputs" \
            --output json)
          
          if [ "$outputs" != "null" ] && [ "$outputs" != "{}" ]; then
            echo "##[section]Deployment Outputs:"
            echo "$outputs" | jq .
            
            # Export outputs as pipeline variables for downstream jobs
            echo "$outputs" | jq -r 'to_entries[] | "##vso[task.setvariable variable=\(.key);isOutput=true]\(.value.value)"'
          else
            echo "##[section]No deployment outputs found"
          fi