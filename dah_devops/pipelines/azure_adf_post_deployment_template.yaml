parameters:
  - name: azureServiceConnection
    type: string
    displayName: 'Azure Service Connection'
  
  - name: environment
    type: string
    displayName: 'Target Environment'
    values:
    - DEV
    - UAT
    - PRD
  
  - name: ms_fabric_workspaces
    type: string
    displayName: 'MS Fabric Workspaces'
  
  - name: adf_name
    type: string
    displayName: 'Azure Data Factory Name'
  
  - name: storage_account_name
    type: string
    displayName: 'Storage Account Name'
  
  - name: keyvault_name
    type: string
    displayName: 'Key Vault Name'
  
  - name: resourceGroupName
    type: string
    displayName: 'Resource Group Name'
  
  - name: service_principal_id
    type: string
    displayName: 'Service Principal ID'
  
  - name: adf_shir_adf_name
    type: string
    displayName: 'ADF SHIR ADF Name'
  
  - name: adf_shir_resource_group
    type: string
    displayName: 'ADF SHIR Resource Group'
  
  - name: subscriptionId
    type: string
    displayName: 'Azure Subscription ID'

variables:
  - name: sourceFolderPath
    value: './dah_adf/gfcsneuwadf001d'
  - name: scriptPath
    value: './dah_devops/pipelines/scripts/azure_adf_post_deployment.sh'
  - name: workspaceName
    value: 'GFCS ${{ parameters.environment }} IDL'

steps:
  - checkout: dahFabricWs
    displayName: 'Checkout MS Fabric Workspace Repository'
    clean: true

  - checkout: dahAdf
    displayName: 'Checkout ADF Repository'
    clean: true

  - checkout: self
    displayName: 'Checkout DevOps Repository'
    clean: true

  - task: AzureCLI@2
    displayName: 'Install Required Tools'
    inputs:
      azureSubscription: ${{ parameters.azureServiceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      failOnStandardError: true
      inlineScript: |
        set -euo pipefail
        
        echo "##[section]Installing required tools..."
        
        # Check if jq is already installed
        if ! command -v jq &> /dev/null; then
          echo "##[command]Installing jq..."
          sudo apt-get update
          sudo apt-get install -y jq
        else
          echo "##[section]jq is already installed: $(jq --version)"
        fi
        
        # Verify installation
        echo "##[section]Verifying tool installation..."
        jq --version || { echo "##[error]jq installation failed"; exit 1; }

  - task: AzureCLI@2
    displayName: 'Validate ADF ARM Template'
    inputs:
      azureSubscription: ${{ parameters.azureServiceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      failOnStandardError: true
      inlineScript: |
        set -euo pipefail
        
        echo "##[section]Validating ADF ARM template and parameters..."
        
        # Define file paths
        ARM_TEMPLATE="$(sourceFolderPath)/ARMTemplateForFactory.json"
        ARM_PARAMS="$(sourceFolderPath)/ARMTemplateParametersForFactory.json"
        
        # Check if files exist
        echo "##[command]Checking template files..."
        if [ ! -f "$ARM_TEMPLATE" ]; then
          echo "##[error]ARM template not found: $ARM_TEMPLATE"
          exit 1
        fi
        
        if [ ! -f "$ARM_PARAMS" ]; then
          echo "##[error]ARM parameters file not found: $ARM_PARAMS"
          exit 1
        fi
        
        # Check if deployment script exists
        if [ ! -f "$(scriptPath)" ]; then
          echo "##[error]Deployment script not found: $(scriptPath)"
          exit 1
        fi
        
        # Make script executable
        chmod +x "$(scriptPath)"
        
        # Validate JSON syntax
        echo "##[command]Validating JSON syntax..."
        jq empty "$ARM_TEMPLATE" || { echo "##[error]Invalid JSON in ARM template"; exit 1; }
        jq empty "$ARM_PARAMS" || { echo "##[error]Invalid JSON in parameters file"; exit 1; }
        
        echo "##[section]Template validation completed successfully"

  - task: AzureCLI@2
    displayName: 'Deploy ADF ARM Template'
    inputs:
      azureSubscription: ${{ parameters.azureServiceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      failOnStandardError: true
      inlineScript: |
        set -euo pipefail
        
        echo "##[section]Starting ADF ARM template deployment..."
        
        # Display deployment parameters
        echo "##[group]Deployment Parameters"
        echo "Environment: ${{ parameters.environment }}"
        echo "Workspace: $(workspaceName)"
        echo "ADF Name: ${{ parameters.adf_name }}"
        echo "Resource Group: ${{ parameters.resourceGroupName }}"
        echo "Key Vault: ${{ parameters.keyvault_name }}"
        echo "Storage Account: ${{ parameters.storage_account_name }}"
        echo "##[endgroup]"
        
        # Execute deployment script
        echo "##[command]Executing deployment script..."
        "$(scriptPath)" \
          --workspace "$(workspaceName)" \
          --env "${{ parameters.environment }}" \
          --adf-template-file "$(sourceFolderPath)/ARMTemplateForFactory.json" \
          --adf-name "${{ parameters.adf_name }}" \
          --keyvault-name "${{ parameters.keyvault_name }}" \
          --resource-group "${{ parameters.resourceGroupName }}" \
          --service-principal-id "${{ parameters.service_principal_id }}" \
          --adf-params-template "$(sourceFolderPath)/ARMTemplateParametersForFactory.json" \
          --storage-account-name "${{ parameters.storage_account_name }}" \
          --subscription-id "${{ parameters.subscriptionId }}" \
          --adf-shir-adf-name "${{ parameters.adf_shir_adf_name }}" \
          --adf-shir-resource-group "${{ parameters.adf_shir_resource_group }}"
        
        echo "##[section]ADF deployment completed successfully"

  - task: AzureCLI@2
    displayName: 'Verify ADF Deployment'
    condition: succeeded()
    inputs:
      azureSubscription: ${{ parameters.azureServiceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      failOnStandardError: true
      continueOnError: true
      inlineScript: |
        set -euo pipefail
        
        echo "##[section]Verifying ADF deployment..."
        
        # Check if ADF exists and is accessible
        echo "##[command]Checking ADF status..."
        adfStatus=$(az datafactory show \
          --name "${{ parameters.adf_name }}" \
          --resource-group "${{ parameters.resourceGroupName }}" \
          --query "provisioningState" \
          --output tsv 2>/dev/null || echo "NotFound")
        
        if [ "$adfStatus" == "Succeeded" ]; then
          echo "##[section]âœ“ ADF is successfully deployed and in 'Succeeded' state"
          
          # Get ADF details
          echo "##[group]ADF Details"
          az datafactory show \
            --name "${{ parameters.adf_name }}" \
            --resource-group "${{ parameters.resourceGroupName }}" \
            --output table
          echo "##[endgroup]"
        else
          echo "##[warning]ADF provisioning state: $adfStatus"
          echo "##[warning]This might be expected if the deployment is still in progress"
        fi